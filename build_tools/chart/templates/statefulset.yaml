{{- if not .Values.application.initializeCommand -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "trackableappname" . }}
  annotations:
    {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
    {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
  labels:
    app: {{ template "appname" . }}
    track: "{{ .Values.application.track }}"
    tier: "{{ .Values.application.tier }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      annotations:
        checksum/application-secrets: "{{ .Values.application.secretChecksum }}"
        {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
        {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
        {{- if .Values.podAnnotations }}
        {{ toYaml .Values.podAnnotations | indent 8 }}
        {{- end }}
      labels:
        app: {{ template "appname" . }}
        track: "{{ .Values.application.track }}"
        tier: "{{ .Values.application.tier }}"
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        {{ toYaml .Values.image.secrets | indent 10 }}
      terminationGracePeriodSeconds: 10
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.application.secretName }}
        envFrom:
        - secretRef:
            name: {{ .Values.application.secretName }}
        {{- end }}
        env:
        - name: DATABASE_URL
          value: {{ .Values.application.database_url | quote }}
        - name: REDIS_ENABLED
          value: {{ .Values.application.redis_enabled | quote }}
        - name: REDIS_HOST
          value: {{ .Values.application.redis_host | quote }}
        - name: REDIS_PORT
          value: {{ .Values.application.redis_port | quote }}
        - name: REDIS_DBINDEX
          value: {{ .Values.application.redis_dbindex | quote }}
        - name: REDIS_PASS
          value: {{ .Values.application.redis_pass | quote }}
        ports:
        - name: "{{ .Values.service.name }}"
          containerPort: {{ .Values.service.internalPort }}
        {{- if .Values.persistence.enabled }}
        volumeMounts:
        - name: odoo-data
          mountPath: /var/lib/odoo
        {{- end}}
        livenessProbe:
          tcpSocket:
#            path: {{ .Values.livenessProbe.path }}
#            scheme: {{ .Values.livenessProbe.scheme }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          tcpSocket:
#            path: {{ .Values.readinessProbe.path }}
#            scheme: {{ .Values.readinessProbe.scheme }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
      volumes:
      - name: odoo-data
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "fullname" . }}-data
        {{- else }}
        emptyDir: {}
        {{- end}}
  selector:
    matchLabels:
      app: {{ template "appname" . }}
  serviceName: {{ .Release.Name }}
  volumeClaimTemplates:
  - metadata:
      name: odoo-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
#      storageClassName: "-"
      resources:
        requests:
          storage: 2Gi
{{- end -}}
